package Exercise1;

/* Задание 1:

Создать классы Собака и Кот с наследованием от класса Животное.

Все животные могут бежать и плыть. В качестве параметра каждому методу передается длина препятствия.
 Результатом выполнения действия будет печать в консоль. (Например, dogBobik.run(150); -> 'Бобик пробежал 150 м.');

У каждого животного есть ограничения на действия (бег: кот 200 м., собака 500 м.; плавание: кот не умеет плавать,
собака 10 м.).

Добавить подсчет созданных котов, собак и животных.

Расширить задачу, добавив для котов возможность кушать из миски, выполнив следующие пункты:
-Сделать так, чтобы в миске с едой не могло получиться отрицательного количества еды (например, в миске 10 еды,
 а кот пытается покушать 15-20).
-Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны). Если коту удалось покушать (хватило еды),
 сытость = true.
-Считаем, что если коту мало еды в миске, то он её просто не трогает, то есть не может быть наполовину сыт
 (это сделано для упрощения логики программы).
-Создать массив котов и миску с едой, попросить всех котов покушать из этой миски и потом вывести информацию
о сытости котов в консоль.
-Добавить метод, с помощью которого можно было бы добавлять еду в миску.*/

public class Main {
    public static void main(String[] args) {
        
        Dog dogCerber = new Dog("Цербер");
        Cat catGarfild = new Cat("Гарфилд");
        dogCerber.run(500);
        catGarfild.run(200);
        dogCerber.run(600);
        catGarfild.run(300);
        dogCerber.swim(10);
        catGarfild.swim(5);
        dogCerber.swim(20);
        Animal.countInfo();
        Dog.countInfo();
        Cat.countInfo();
        
        //проверка расширенной задачи

//        Cat[] cats = new Cat[3];
//        cats[0] = new Cat("Барсик");
//        cats[1] = new Cat("Вася");
//        cats[2] = new Cat("Бублик");
//        Bowl bowl = new Bowl(25);
//        for (Cat cat : cats) {
//            cat.feeding();
//            cat.isFull();
//        }
//        bowl.addFood(10);
//        cats[2].feeding();
//        cats[2].isFull();
    
    }
}
